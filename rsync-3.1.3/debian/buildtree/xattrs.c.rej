--- xattrs.c
+++ xattrs.c
@@ -82,7 +82,7 @@ typedef struct {
 static size_t namebuf_len = 0;
 static char *namebuf = NULL;
 
-static item_list empty_xattr = EMPTY_ITEM_LIST;
+static const item_list empty_xattr = EMPTY_ITEM_LIST;
 static item_list rsync_xal_l = EMPTY_ITEM_LIST;
 
 static size_t prior_xattr_count = (size_t)-1;
@@ -466,7 +466,7 @@ int send_xattr(int f, stat_x *sxp)
  * need so that send_xattr_request() can tell the sender about them. */
 int xattr_diff(struct file_struct *file, stat_x *sxp, int find_all)
 {
-	item_list *lst = rsync_xal_l.items;
+	const item_list *lst = rsync_xal_l.items;
 	rsync_xa *snd_rxa, *rec_rxa;
 	int snd_cnt, rec_cnt;
 	int cmp, same, xattrs_equal = 1;
--- xattrs.c
+++ xattrs.c
@@ -398,8 +398,9 @@ static int find_matching_xattr(item_list *xalp)
 }
 
 /* Store *xalp on the end of rsync_xal_l */
-static void rsync_xal_store(item_list *xalp)
+static int rsync_xal_store(item_list *xalp)
 {
+	int ndx = rsync_xal_l.count; /* pre-incremented count */
 	item_list *new_lst = EXPAND_ITEM_LIST(&rsync_xal_l, item_list, RSYNC_XAL_LIST_INITIAL);
 	/* Since the following call starts a new list, we know it will hold the
 	 * entire initial-count, not just enough space for one new item. */
@@ -408,6 +409,7 @@ static void rsync_xal_store(item_list *xalp)
 	memcpy(new_lst->items, xalp->items, xalp->count * sizeof (rsync_xa));
 	new_lst->count = xalp->count;
 	xalp->count = 0;
+	return ndx;
 }
 
 /* Send the make_xattr()-generated xattr list for this flist entry. */
@@ -454,8 +456,7 @@ int send_xattr(int f, stat_x *sxp)
 			else
 				write_bigbuf(f, rxa->datum, rxa->datum_len);
 		}
-		ndx = rsync_xal_l.count; /* pre-incremented count */
-		rsync_xal_store(sxp->xattr); /* adds item to rsync_xal_l */
+		ndx = rsync_xal_store(sxp->xattr); /* adds item to rsync_xal_l */
 	}
 
 	return ndx;
@@ -769,8 +770,7 @@ void receive_xattr(int f, struct file_struct *file)
 	if (need_sort && count > 1)
 		qsort(temp_xattr.items, count, sizeof (rsync_xa), rsync_xal_compare_names);
 
-	ndx = rsync_xal_l.count; /* pre-incremented count */
-	rsync_xal_store(&temp_xattr); /* adds item to rsync_xal_l */
+	ndx = rsync_xal_store(&temp_xattr); /* adds item to rsync_xal_l */
 
 	F_XATTR(file) = ndx;
 }
--- xattrs.c
+++ xattrs.c
@@ -79,9 +79,16 @@ typedef struct {
 	int num;
 } rsync_xa;
 
+typedef struct {
+	item_list xa_items;
+} rsync_xa_list;
+
 static size_t namebuf_len = 0;
 static char *namebuf = NULL;
 
+static const rsync_xa_list empty_xa_list = {
+	.xa_items = EMPTY_ITEM_LIST,
+};
 static const item_list empty_xattr = EMPTY_ITEM_LIST;
 static item_list rsync_xal_l = EMPTY_ITEM_LIST;
 
@@ -360,17 +367,19 @@ int copy_xattrs(const char *source, const char *dest)
 	return 0;
 }
 
-static int find_matching_xattr(item_list *xalp)
+static int find_matching_xattr(const item_list *xalp)
 {
-	size_t i, j;
-	item_list *lst = rsync_xal_l.items;
+	const rsync_xa_list *glst = rsync_xal_l.items;
+	size_t i;
 
 	for (i = 0; i < rsync_xal_l.count; i++) {
-		rsync_xa *rxas1 = lst[i].items;
-		rsync_xa *rxas2 = xalp->items;
+		const item_list *lst = &glst[i].xa_items;
+		const rsync_xa *rxas1 = lst->items;
+		const rsync_xa *rxas2 = xalp->items;
+		size_t j;
 
 		/* Wrong number of elements? */
-		if (lst[i].count != xalp->count)
+		if (lst->count != xalp->count)
 			continue;
 		/* any elements different? */
 		for (j = 0; j < xalp->count; j++) {
@@ -401,13 +410,13 @@ static int find_matching_xattr(item_list *xalp)
 static int rsync_xal_store(item_list *xalp)
 {
 	int ndx = rsync_xal_l.count; /* pre-incremented count */
-	item_list *new_lst = EXPAND_ITEM_LIST(&rsync_xal_l, item_list, RSYNC_XAL_LIST_INITIAL);
+	rsync_xa_list *new_list = EXPAND_ITEM_LIST(&rsync_xal_l, rsync_xa_list, RSYNC_XAL_LIST_INITIAL);
 	/* Since the following call starts a new list, we know it will hold the
 	 * entire initial-count, not just enough space for one new item. */
-	*new_lst = empty_xattr;
-	(void)EXPAND_ITEM_LIST(new_lst, rsync_xa, xalp->count);
-	memcpy(new_lst->items, xalp->items, xalp->count * sizeof (rsync_xa));
-	new_lst->count = xalp->count;
+	*new_list = empty_xa_list;
+	(void)EXPAND_ITEM_LIST(&new_list->xa_items, rsync_xa, xalp->count);
+	memcpy(new_list->xa_items.items, xalp->items, xalp->count * sizeof (rsync_xa));
+	new_list->xa_items.count = xalp->count;
 	xalp->count = 0;
 	return ndx;
 }
@@ -467,7 +476,8 @@ int send_xattr(int f, stat_x *sxp)
  * need so that send_xattr_request() can tell the sender about them. */
 int xattr_diff(struct file_struct *file, stat_x *sxp, int find_all)
 {
-	const item_list *lst = rsync_xal_l.items;
+	const rsync_xa_list *glst = rsync_xal_l.items;
+	const item_list *lst;
 	rsync_xa *snd_rxa, *rec_rxa;
 	int snd_cnt, rec_cnt;
 	int cmp, same, xattrs_equal = 1;
@@ -480,9 +490,10 @@ int xattr_diff(struct file_struct *file, stat_x *sxp, int find_all)
 		rec_cnt = 0;
 	}
 
-	if (F_XATTR(file) >= 0)
-		lst += F_XATTR(file);
-	else
+	if (F_XATTR(file) >= 0) {
+		glst += F_XATTR(file);
+		lst = &glst->xa_items;
+	} else
 		lst = &empty_xattr;
 
 	snd_rxa = lst->items;
@@ -541,11 +552,14 @@ int xattr_diff(struct file_struct *file, stat_x *sxp, int find_all)
  * XSTATE_ABBREV states into XSTATE_DONE. */
 void send_xattr_request(const char *fname, struct file_struct *file, int f_out)
 {
-	item_list *lst = rsync_xal_l.items;
+	const rsync_xa_list *glst = rsync_xal_l.items;
+	const item_list *lst;
 	int cnt, prior_req = 0;
 	rsync_xa *rxa;
 
-	lst += F_XATTR(file);
+	glst += F_XATTR(file);
+	lst = &glst->xa_items;
+
 	for (rxa = lst->items, cnt = lst->count; cnt--; rxa++) {
 		if (rxa->datum_len <= MAX_FULL_DATUM)
 			continue;
@@ -596,7 +610,8 @@ void send_xattr_request(const char *fname, struct file_struct *file, int f_out)
  * stores it in place of its checksum. */
 int recv_xattr_request(struct file_struct *file, int f_in)
 {
-	item_list *lst = rsync_xal_l.items;
+	const rsync_xa_list *glst = rsync_xal_l.items;
+	const item_list *lst;
 	char *old_datum, *name;
 	rsync_xa *rxa;
 	int rel_pos, cnt, num, got_xattr_data = 0;
@@ -605,7 +620,8 @@ int recv_xattr_request(struct file_struct *file, int f_in)
 		rprintf(FERROR, "recv_xattr_request: internal data error!\n");
 		exit_cleanup(RERR_PROTOCOL);
 	}
-	lst += F_XATTR(file);
+	glst += F_XATTR(file);
+	lst = &glst->xa_items;
 
 	cnt = lst->count;
 	rxa = lst->items;
@@ -796,12 +812,13 @@ void cache_tmp_xattr(struct file_struct *file, stat_x *sxp)
 void uncache_tmp_xattrs(void)
 {
 	if (prior_xattr_count != (size_t)-1) {
-		item_list *xattr_item = rsync_xal_l.items;
-		item_list *xattr_start = xattr_item + prior_xattr_count;
-		xattr_item += rsync_xal_l.count;
+		rsync_xa_list *xa_list_item = rsync_xal_l.items;
+		rsync_xa_list *xa_list_start = xa_list_item + prior_xattr_count;
+		xa_list_item += rsync_xal_l.count;
 		rsync_xal_l.count = prior_xattr_count;
-		while (xattr_item-- > xattr_start)
-			rsync_xal_free(xattr_item);
+		while (xa_list_item-- > xa_list_start) {
+			rsync_xal_free(&xa_list_item->xa_items);
+		}
 		prior_xattr_count = (size_t)-1;
 	}
 }
@@ -921,8 +938,9 @@ static int rsync_xal_set(const char *fname, item_list *xalp,
 int set_xattr(const char *fname, const struct file_struct *file,
 	      const char *fnamecmp, stat_x *sxp)
 {
+	rsync_xa_list *glst = rsync_xal_l.items;
+	item_list *lst;
 	int ndx;
-	item_list *lst = rsync_xal_l.items;
 
 	if (dry_run)
 		return 1; /* FIXME: --dry-run needs to compute this value */
@@ -952,7 +970,9 @@ int set_xattr(const char *fname, const struct file_struct *file,
 #endif
 
 	ndx = F_XATTR(file);
-	return rsync_xal_set(fname, lst + ndx, fnamecmp, sxp);
+	glst += ndx;
+	lst = &glst->xa_items;
+	return rsync_xal_set(fname, lst, fnamecmp, sxp);
 }
 
 #ifdef SUPPORT_ACLS
--- xattrs.c
+++ xattrs.c
@@ -79,7 +79,16 @@ typedef struct {
 	int num;
 } rsync_xa;
 
-typedef struct {
+struct _rsync_xa_list;
+
+typedef struct _rsync_xa_list_ref {
+	struct _rsync_xa_list_ref *next;
+	int ndx;
+} rsync_xa_list_ref;
+
+typedef struct _rsync_xa_list {
+	int ndx;
+	int64 key;
 	item_list xa_items;
 } rsync_xa_list;
 
@@ -91,6 +100,7 @@ static const rsync_xa_list empty_xa_list = {
 };
 static const item_list empty_xattr = EMPTY_ITEM_LIST;
 static item_list rsync_xal_l = EMPTY_ITEM_LIST;
+static struct hashtable *rsync_xal_h = NULL;
 
 static size_t prior_xattr_count = (size_t)-1;
 
@@ -367,19 +377,58 @@ int copy_xattrs(const char *source, const char *dest)
 	return 0;
 }
 
-static int find_matching_xattr(const item_list *xalp)
+static int64 xattr_lookup_hash(const item_list *xalp)
 {
-	const rsync_xa_list *glst = rsync_xal_l.items;
+	const rsync_xa *rxas = xalp->items;
 	size_t i;
+	int64 key = hashlittle(&xalp->count, sizeof xalp->count);
+
+	for (i = 0; i < xalp->count; i++) {
+		key += hashlittle(rxas[i].name, rxas[i].name_len);
+		if (rxas[i].datum_len > MAX_FULL_DATUM)
+			key += hashlittle(rxas[i].datum, MAX_DIGEST_LEN);
+		else
+			key += hashlittle(rxas[i].datum, rxas[i].datum_len);
+	}
+
+	if (key == 0) {
+		/* This is very unlikely, but we should never
+		 * return 0 as hashtable_find() doesn't like it. */
+		return 1;
+	}
+
+	return key;
+}
 
-	for (i = 0; i < rsync_xal_l.count; i++) {
-		const item_list *lst = &glst[i].xa_items;
-		const rsync_xa *rxas1 = lst->items;
+static int find_matching_xattr(const item_list *xalp)
+{
+	const struct ht_int64_node *node;
+	const rsync_xa_list_ref *ref;
+	int64 key;
+
+	if (rsync_xal_h == NULL)
+		return -1;
+
+	key = xattr_lookup_hash(xalp);
+
+	node = hashtable_find(rsync_xal_h, key, 0);
+	if (node == NULL)
+		return -1;
+
+	if (node->data == NULL)
+		return -1;
+
+	for (ref = node->data; ref != NULL; ref = ref->next) {
+		const rsync_xa_list *ptr = rsync_xal_l.items;
+		const rsync_xa *rxas1;
 		const rsync_xa *rxas2 = xalp->items;
 		size_t j;
 
+		ptr += ref->ndx;
+		rxas1 = ptr->xa_items.items;
+
 		/* Wrong number of elements? */
-		if (lst->count != xalp->count)
+		if (ptr->xa_items.count != xalp->count)
 			continue;
 		/* any elements different? */
 		for (j = 0; j < xalp->count; j++) {
@@ -400,7 +449,7 @@ static int find_matching_xattr(const item_list *xalp)
 		}
 		/* no differences found.  This is The One! */
 		if (j == xalp->count)
-			return i;
+			return ref->ndx;
 	}
 
 	return -1;
@@ -409,8 +458,10 @@ static int find_matching_xattr(const item_list *xalp)
 /* Store *xalp on the end of rsync_xal_l */
 static int rsync_xal_store(item_list *xalp)
 {
+	struct ht_int64_node *node;
 	int ndx = rsync_xal_l.count; /* pre-incremented count */
 	rsync_xa_list *new_list = EXPAND_ITEM_LIST(&rsync_xal_l, rsync_xa_list, RSYNC_XAL_LIST_INITIAL);
+	rsync_xa_list_ref *new_ref;
 	/* Since the following call starts a new list, we know it will hold the
 	 * entire initial-count, not just enough space for one new item. */
 	*new_list = empty_xa_list;
@@ -418,6 +469,40 @@ static int rsync_xal_store(item_list *xalp)
 	memcpy(new_list->xa_items.items, xalp->items, xalp->count * sizeof (rsync_xa));
 	new_list->xa_items.count = xalp->count;
 	xalp->count = 0;
+
+	new_list->ndx = ndx;
+	new_list->key = xattr_lookup_hash(&new_list->xa_items);
+
+	if (rsync_xal_h == NULL)
+		rsync_xal_h = hashtable_create(512, 1);
+	if (rsync_xal_h == NULL)
+		out_of_memory("rsync_xal_h hashtable_create()");
+
+	node = hashtable_find(rsync_xal_h, new_list->key, 1);
+	if (node == NULL)
+		out_of_memory("rsync_xal_h hashtable_find()");
+
+	new_ref = new0(rsync_xa_list_ref);
+	if (new_ref == NULL)
+		out_of_memory("new0(rsync_xa_list_ref)");
+
+	new_ref->ndx = ndx;
+
+	if (node->data != NULL) {
+		rsync_xa_list_ref *ref = node->data;
+
+		while (ref != NULL) {
+			if (ref->next != NULL) {
+				ref = ref->next;
+				continue;
+			}
+
+			ref->next = new_ref;
+			break;
+		}
+	} else
+		node->data = new_ref;
+
 	return ndx;
 }
 
@@ -817,7 +902,41 @@ void uncache_tmp_xattrs(void)
 		xa_list_item += rsync_xal_l.count;
 		rsync_xal_l.count = prior_xattr_count;
 		while (xa_list_item-- > xa_list_start) {
+			struct ht_int64_node *node;
+			rsync_xa_list_ref *ref;
+
 			rsync_xal_free(&xa_list_item->xa_items);
+
+			if (rsync_xal_h == NULL)
+				continue;
+
+			node = hashtable_find(rsync_xal_h, xa_list_item->key, 0);
+			if (node == NULL)
+				continue;
+
+			if (node->data == NULL)
+				continue;
+
+			ref = node->data;
+			if (xa_list_item->ndx == ref->ndx) {
+				/* xa_list_item is the first in the list. */
+				node->data = ref->next;
+				free(ref);
+				continue;
+			}
+
+			while (ref != NULL) {
+				if (ref->next == NULL) {
+					ref = NULL;
+					break;
+				}
+				if (xa_list_item->ndx == ref->next->ndx) {
+					ref->next = ref->next->next;
+					free(ref);
+					break;
+				}
+				ref = ref->next;
+			}
 		}
 		prior_xattr_count = (size_t)-1;
 	}
